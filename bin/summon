#!/usr/bin/env python

# Copyright (c) 2010 John Lincoln Kenyon
#  
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
#  
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#  
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
# OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
# WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#  

# Version 0.2.0

help_text = '''
Summon is a program used for retrieving commonly used template files and
placing them in the current directory, ready for use in a project.

Usage:
  Getting this help
  $ summon help
  
  Simple retreival of a file
  $ summon example_file.txt
  
  Simple retreival of several files
  $ summon example_file_1.txt example_file_2.txt
  
  Summon a file under a new name
  $ summon general_makefile as Makefile
  
  Summon several files under new names
  $ summon a.txt b.txt c.txt as A.txt B.txt C.txt
  
  Summon and apply templates
  $ summon CMakeLists.txt where project=Example author=John_Kenyon
  
  Multiple summons with and without template application
  $ summon CMakesLists.txt where project=Example and example_file_1.txt



Adding files locally
  When you first run summon, it will create a directory in your home directory 
  called (.nexus). Any files within this directory can be summoned.  If a file
  is given an extension of .tmpl, then this file may be summoned with template
  values using the "where" statement above.  Template values should be listed
  in the file using the standard python format of %(name)s.
'''

import ply.lex as lex
import ply.yacc as yacc
from pprint import pprint
import sys
import os
import urllib2
from BeautifulSoup import BeautifulSoup

class SummonLexer:
    reserved_words = '''
    HELP
    LIST
    AS
    WHERE
    AND
    '''.split()
    tokens = reserved_words + ['STRING']
    
    t_ignore    = '\t\n '
    
    def t_STRING(self,t):
        r'[^\n\t ]+'
        if t.value.upper() in [x.upper() for x in self.reserved_words]:
            t.type = t.value.upper()
        return t

    def t_error(self,t):
        print "Lexer Error"
        print t
        print dir(t.value[0])
        
    def __init__(self):
        self.lexer = lex.lex(module=self)

    def tokenize(self,data):
        'Debug method!'
        self.lexer.input(data)
        while True:
            tok = self.lexer.token()
            if tok:
                yield tok
            else:
                break

class SummonParser:
    def __init__(self):
        self.lexer = SummonLexer()
        self.tokens = self.lexer.tokens
        self.parser = yacc.yacc(module=self,write_tables=0,debug=False)

    def parse(self,data):
        if data:
            return self.parser.parse(data,self.lexer.lexer,0,0,None)
        else:
            return []

    def p_error(self,p):
        print 'Error!'
        print p
        print

    def p_root_0(self, p):
        '''root : command_list'''
        p[0] = p[1]

    def p_root_1(self, p):
        '''root : HELP'''
        print help_text
        p[0] = {}

    def p_root_2(self, p):
        '''root : LIST'''
        show_listing()
        p[0] = {}

    def p_command_list_0(self,p):
        '''command_list : command'''
        p[0] = [p[1]]

    def p_command_list_1(self,p):
        '''command_list : command_list AND command'''
        p[0] = p[1] + [p[3]]

    def p_command_0(self,p):
        '''command : string_list'''
        p[0] = dict(targets=p[1])

    def p_command_1(self,p):
        '''command : string_list AS string_list'''
        if len(p[1]) != len(p[3]):
            raise Exception('''
Error, unbalanced AS statement. You should have as many requested files as you have destinations.
            '''.lstrip())
        p[0] = dict(targets=p[1],destination=p[3])
        

    def p_command_2(self,p):
        '''command : command WHERE string_list'''
        command = p[1]
        command['values'] = p[3]
        p[0] = command

    def p_string_list_0(self,p):
        '''string_list : STRING'''
        p[0] = [p[1]]

    def p_string_list_1(self,p):
        '''string_list : string_list STRING'''
        p[0] = p[1] + [p[2]]

def reduce_command(commands):
    assert(commands.has_key('targets'))

    if commands.has_key('values'):
        targets = [x+'.tmpl' for x in commands['targets']]
    else:
        targets = commands['targets']

    if commands.has_key('destination'):
        destinations = commands['destination']
    else:
        destinations = commands['targets']

    if commands.has_key('values'):
        values = dict()
        for line in commands['values']:
            left,right = tuple(line.split('='))
            values[left] = right
    else:
        values = {}

    ret = []
    for target,destination,raw in zip(targets,destinations,commands['targets']):
        if destination == '_':
            destination = raw
        ret.append({'get_name':target,'put_name':destination,'values':values})
    return ret

# These were all added as a bit of a hack to allow listing of availible files
# Turns outs, this was a dumb way to do it, I should have refactored the later
# code used in retrieving the file, and re-used that here as well... - JLK
# Todo: Fix this!

def get_nexus_dirs():
    try:
        return [os.path.join(os.getenv('HOME'),'.nexus')]
    except:
        return []

def get_nexus_servers():
    try:
        servername_list = os.getenv('SUMMONSERVER')
        return servername_list.split(':')
    except:
        return []

def get_local_nexus_file_list():
    ret = []
    for d in get_nexus_dirs():
        vals = os.listdir(d)
        vals = [x for x in vals if x[0] != '.']
        ret.extend(vals)
    return ret

def show_listing():
    local_items = get_local_nexus_file_list()
    for x in local_items:
        print "home  ", x

    web_items = get_web_nexus_file_list()
    web_items = [x for x in web_items if x not in local_items]
    for x in web_items:
        print "web   ", x
# End bad code

def flatten(l):
    ret = []
    for sl in l:
        for v in sl:
            ret.append(v)
    return ret

def get_web_nexus_file_list():
    for servername in get_nexus_servers():
        url = 'http://%(servername)s/nexus/'%locals()
        try:
            result = urllib2.urlopen(url)
            data = result.read()
            links = BeautifulSoup(data).findAll('a')
            items = [str(x.contents[0]).strip() for x in links]
            items.remove('Parent Directory')
            return items
        except Exception, e:
            print e
            pass
    return []

def get_file_data(fname):
    # Search locally
    if os.path.isdir('nexus'):
        if os.path.isfile( os.path.join('nexus',fname)):
            with open(os.path.join('nexus',fname),'r') as fin:
                data = fin.read()
                return data

    if os.path.isdir('.nexus'):
        if os.path.isfile( os.path.join('.nexus',fname)):
            with open(os.path.join('.nexus',fname),'r') as fin:
                data = fin.read()
                return data
    
    # Search home
    home_nexus_fname = os.path.join(os.getenv('HOME'),'.nexus',fname)
    if os.path.isfile(home_nexus_fname):
        with open(home_nexus_fname,'r') as fin:
            data = fin.read()
            return data

    # Search Online
    for servername in get_nexus_servers:
        url = 'http://%(servername)s/nexus/%(fname)s'%locals()
        try:
            result = urllib2.urlopen(url)
            data = result.read()
            return data
        except Exception, e:
            print e
            pass
        
    raise Exception(' >> Reason, could not find file: '+fname)

def execute_command(command):
    assert(command.has_key('get_name'))
    assert(command.has_key('put_name'))
    assert(command.has_key('values'))
    get_name = command['get_name']
    put_name = command['put_name']
    values   = command['values']

    # Get
    data = get_file_data(get_name)

    # Optionally apply
    if values:
        data = data % values

    # Put
    with open(put_name,'w') as fout:
        fout.write(data)

    print put_name,"has appeared"

def main(argv):
    if not os.path.isdir(os.path.join(os.getenv('HOME'),'.nexus')):
        print "No $HOME/.nexus directory found. Creating..."
        try:
            nexus_dir = os.path.join(os.getenv('HOME'),'.nexus')
            os.makedirs(nexus_dir)
            print '''
Created directory "%(nexus_dir)s".  You should place any files you wish to
summon in this directory.''' % locals()
        except:
            print "Failed to create Nexus"


    user_input = ' '.join(argv[1:])
    parser = SummonParser()
    commands = parser.parse(user_input)
    simple_commands = flatten([reduce_command(x) for x in commands])
    for c in simple_commands:
        try:
            execute_command(c)
        except Exception, e:
            print " !! Error, could not summon file:",c['get_name']
            print e
            print "Continuing..."
            print

    #pprint(simple_commands)

if __name__ == '__main__':
    main(sys.argv)





